Student ID: [____________]
Family Name: [____________]
First Name: [____________]
INSTRUCTIONS:

Complete and return this multiple-choice exam
no later than 23:59 CET Monday 23 August 2021.

You may consult any written material you wish
(e.g. the class notes or the recommended textbook),
but you must not consult or collaborate with
any other person.

Complete this exam by placing an 'X' in the box
beside the single correct answer of each question,
like so:

    [ ] This is not the correct answer
    [ ] This is not the correct answer either
    [ ] This is an incorrect answer
    [X] This is the correct answer
    [ ] This is an irrelevant answer

WARNING: Each question has only one correct answer.
         If two or more boxes are marked with an 'X',
         the answer will be scored as zero.
________________________________________________________________________________
1. The static type of a Perl variable is determined by:

	[x] Nothing: Perl variables don't have a static type
	[ ] Random chance
	[ ] The compile-time type declarator of the variable
	[ ] The type of the first value placed in the variable
	[ ] The name of the variable

________________________________________________________________________________
2. Perl's three main types of call context (or "amount context") are:

	[ ] List, scalar, and void
	[ ] List, scalar, and null
	[ ] List, linear, and void
	[ ] Blood, sweat, and tears
	[ ] Null, scalar, and void

________________________________________________________________________________
3. The "default variable" (or "topic variable") is:

	[ ] $=
	[ ] $$
	[x] $_
	[ ] The last variable that was successfully assigned to
	[ ] @_

________________________________________________________________________________
4. You can access the command-line arguments of a Perl program via:

	[ ] @ARG
	[ ] @ARGS
	[ ] @_
	[ ] @ARGV
	[ ] $ARGV

________________________________________________________________________________
5. The main repository for Open Source Perl modules is:

	[ ] Perlhub
	[ ] Github
	[ ] CSPAN
	[ ] CPAN
	[ ] www.perl.org

________________________________________________________________________________
6. The three standard sigils for variable declarations are:

	[ ] '$' for scalars, '@' for hashes, '%' for arrays
	[ ] '$' for scalars, '@' for consts, '%' for literals
	[ ] '$' for lookups, '@' for reuses, '%' for declarations
	[ ] '$' for scalars, '@' for arrays, '%' for hashes
	[ ] '$' for numeric, '@' for emails, '%' for percentages

________________________________________________________________________________
7. The difference between a 'my' variable and an 'our' variable is:

	[ ] 'my' variables are compile-time;      'our' variables are run-time
	[ ] 'my' variables are lexically scoped;  'our' variables are package scoped
	[ ] 'my' variables are subroutine scoped; 'our' variables are block scoped
	[ ] 'my' variables are assignable;        'our' variables are constants
	[ ] 'my' variables must be scalars;       'our' variables must be arrays or hashes

________________________________________________________________________________
8. A single-quoted string (such as: 'I will achieve 100% on this exam')...

	[ ] ...interpolates both variables and backslashed escape sequences
	[ ] ...only interpolates backslashed escape sequences, but not variables
	[ ] ...does not interpolate variables or backslashed escape sequences
	[ ] ...only interpolates variables, but not backslashed escape sequences
	[ ] ...converts its contents to ASCII, even if they are Unicode characters

________________________________________________________________________________
9. The term qq{XXXXX} is...

	[ ] ...another way of writing the array of strings: ['X', 'X', 'X', 'X', 'X']
	[ ] ...another way of writing the double-quoted string: "XXXXX"
	[ ] ...another way of writing the single-quoted string: 'XXXXX'
	[ ] ...a call to the 'qq' function, passing it a block of code
	[ ] ...another way of writing the list of strings:  ('X', 'X', 'X', 'X', 'X')

________________________________________________________________________________
10. Which of the following is NOT a single valid Perl number?

	[ ] 1'042
	[ ] 1_042
	[ ] 1042
	[ ] 1.042e3
	[ ] 0b10000010010

________________________________________________________________________________
11. An array is...

	[ ] A multidimensional list
	[ ] A list with a predeclared fixed number of elements
	[ ] A container for a list
	[ ] Exactly the same thing as a list
	[ ] Something that is always contained inside a list

________________________________________________________________________________
12. An 'if' statement requires curly brackets around the statements it controls...

	[ ] ...in all circumstances
	[ ] ...never; the curly brackets are always optional in an 'if' statement
	[ ] ...only if it controls exactly one statement
	[ ] ...only if the statements it controls include a variable declaration
	[ ] ...only if it controls two or more statements

________________________________________________________________________________
13. To specify a second alternative test after an 'if', the correct keyword is:

	[ ] else if (with whitespace between the two words)
	[ ] elif
	[ ] elseif  (with no whitespace between the two words)
	[ ] elsif
	[ ] ormaybe (with no whitespace between the two words)

________________________________________________________________________________
14. "Short-circuiting" of a boolean expression means...

	[ ] ...Perl will never execute an 'else' block
	[ ] ...Perl defers evaluating the expression until the result is tested
	[ ] ...Perl programs can cause CPUs to emit sparks if an expression is too complex
	[ ] ...Perl only evaluates each boolean expression once during the program
	[ ] ...Perl evaluates as little as required to get a definite answer

________________________________________________________________________________
15. A "foreach-style" loop (such as: for (@list) {...}) will be iterated...

	[ ] ...once per element in the list in all circumstances
	[ ] ...an unknown number of times, until the list being iterated is empty
	[ ] ...never, because an array is not a list and cannot be iterated
	[ ] ...endlessly, until a 'last' is executed in the loop
	[ ] ...once per element in the list, unless a 'last' is executed in the block

________________________________________________________________________________
16. The 'while' loop in Perl...

	[ ] ...iterates until its condition becomes true anywhere within its block
	[ ] ...iterates until its condition becomes false anywhere within its block
	[ ] ...iterates until its condition is false at the start of an iteration
	[ ] ...doesn't exist; Perl does not have a 'while' loop
	[ ] ...iterates until its condition is true at the start of an iteration

________________________________________________________________________________
17. The keywords for the Perl switch statement are:

	[ ] 'given'  and 'when'    and 'default'
	[ ] 'gather' and 'take'    and 'otherwise'
	[ ] 'whence' and 'whither' and 'thither'
	[ ] 'switch' and 'case'    and 'else'
	[ ] 'case'   and 'of'      and 'or'

________________________________________________________________________________
18. Which five Perl values are the only values that ever evaluate false?

	[ ] 0, +0, -0, 0.0, -0.0
	[ ] 0, '0', 'false', 'False', 'FALSE'
	[ ] False, Nil, Null, None, Empty
	[ ] 0, '0', '', (), undef
	[ ] 0, '0', '', (), []

________________________________________________________________________________
19. If the array @x contains four elements,
    how many elements will be in the list (1, @x, 2)?

	[ ] Two:   because Perl ignores non-scalar variables in a list constructor
	[ ] Eight: because 1 * 4 * 2 = 8
	[ ] Three: because the array will become a single element within the list
	[ ] None:  because it won't compile; arrays can't be used in list constructors
	[ ] Six:   because the four array elements will be flattened into the list

________________________________________________________________________________
20. A hash variable stores...

	[ ] Values of any scalar type, indexed by keys that are always strings
	[ ] Values that are unique, indexed by keys that may be repeated
	[ ] Values that are always strings, indexed by keys of any type
	[ ] Random values, indexed by sequential keys of any type
	[ ] Values of any scalar or list type, indexed by keys that are always strings

________________________________________________________________________________
21. The expression 1 / 'Inf' produces the result:

	[ ] A fatal exception (because 'Inf' is a string, not a number)
	[ ] A non-fatal warning (because 'Inf' is a string, not a number)
	[ ] 1 (as a convenience, to avoid subsequent division by zero)
	[ ] 0 (because that's the correct mathematical outcome)
	[ ] An infinite evaluation loop; the program will run forever

________________________________________________________________________________
22. A "reference" in Perl is best described as:

	[ ] A type-safe immutable pointer to an existing value or variable
	[ ] An alias (i.e. another name) for an existing variable
	[ ] A link to the documentation for an existing value or variable
	[ ] A mutable pointer to a value or variable, without type-checking
	[ ] A deep copy of an existing variable or value

________________________________________________________________________________
23. In Perl, you can take references to...

	[ ] ...scalars, arrays, hashes, and subroutines
	[ ] ...arrays and hashes (i.e. containers), but NOT scalars or subroutines
	[ ] ...scalars, arrays, and hashes, but NOT subroutines
	[ ] ...scalars and arrays, but NOT hashes or subroutines
	[ ] ...only scalars (NOT to arrays, hashes, or subroutines)

________________________________________________________________________________
24. User-defined subroutines are declared with the keyword:

	[ ] 'subroutine'
	[ ] 'do'
	[ ] Nothing: subroutines are not explicitly declared in Perl
	[ ] 'fun'
	[ ] 'sub'

________________________________________________________________________________
25. Which variable contains the argument with which a subroutine was called?

	[ ] @ARGV
	[ ] @_
	[ ] @ARGS
	[ ] $ARGV
	[ ] $_

________________________________________________________________________________
26. Which one of the following subroutine declarations correctly declares
    a subroutine that can must be called with at least two arguments
    but which may also be called with more than two arguments?

	[ ] sub two_or_more ($flag, ...)             {...}
	[ ] sub two_or_more ($flag, $data = @extras) {...}
	[ ] sub two_or_more ($flag, @data)           {...}
	[ ] sub two_or_more (@flags, @data_set)      {...}
	[ ] sub two_or_more ($data, $flag)           {...}

________________________________________________________________________________
27. If a user-defined subroutine does not contain a 'return' statement...

	[ ] ...it will throw an exception after executing its final statement
	[ ] ...it will return the value the final statement in its code block
	[ ] ...it will never return and will continue to execute forever
	[ ] ...it will return 'undef'
	[ ] ...it will return the value the last expression it actually evaluates

________________________________________________________________________________
28. The keyword to throw an exception in Perl is:

	[ ] 'exit'
	[ ] 'die'
	[ ] 'except'
	[ ] 'raise'
	[ ] 'throw'

________________________________________________________________________________
29. How can exceptions be caught and subsequently accessed in Perl?

	[ ] Caught in a 'catch' block;  accessed via an 'access' block
	[ ] Caught in an 'eval' block'; accessed via the special $! variable
	[ ] Caught in a 'try' block;    accessed via the builtin 'eval' function
	[ ] Caught in an 'eval' block;  accessed via the special $@ variable
	[ ] Exceptions in Perl can't be caught or accessed after they're thrown

________________________________________________________________________________
30. What is the purpose of the 'use strict' pragma?

	[ ] It disallows package variables (all variables must be declared with 'my')
	[ ] It prevents any construct that might also be valid C code
	[ ] It reports all errors using verbose (and harshly worded) error messages
	[ ] It disallows undeclared variables, barewords, and symbolic references
	[ ] It converts all warnings to fatal errors

================================================================================
END OF EXAM
================================================================================
